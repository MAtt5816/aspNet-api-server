/*
 * API schema for research project
 *
 * API schema for research project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using AspNetApiServer.Attributes;
using AspNetApiServer.Security;
using AspNetApiServer.Models;
using AspNetApiServer.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace AspNetApiServer.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StudentApiController : ControllerBase
    { 
        /// <summary>
        /// Find first n students
        /// </summary>
        /// <remarks>Find and return first n students ordered by its IDs.</remarks>
        /// <param name="results">Number of students to return.</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid &#39;results&#39; parameter value</response>
        /// <response code="401">unauthorized</response>
        [HttpGet]
        [Route("/student")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StudentGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Student>), description: "successful operation")]
        public virtual IActionResult StudentGet([FromQuery (Name = "results")]int? results)
        {
            if (results >= 1)
            {
                using var db = new DB.StudentDataContext();
                IEnumerable<Student> students = db.Students.Include(s => s.Location)
                    .Include(s => s.Picture).Take((int)results);
                return StatusCode(200, students.ToList());
            }
            else
            {
                var message = new ErrorMessage()
                {
                    Field = "results",
                    Message = "Results number must be greater than or equal to 1."
                };

                return StatusCode(400, message);
            }
        }

        /// <summary>
        /// Add a new students
        /// </summary>
        /// <remarks>Add a new students</remarks>
        /// <param name="students">Create a new students</param>
        /// <response code="201">Created successfully</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">unauthorized</response>
        /// <response code="422">Validation exception</response>
        [HttpPost]
        [Route("/student")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StudentPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(List<Student>), description: "Created successfully")]
        [SwaggerResponse(statusCode: 422, type: typeof(List<ErrorMessage>), description: "Validation exception")]
        public virtual IActionResult StudentPost([FromBody]List<Student> students)
        { 
            using var db = new DB.StudentDataContext();
            foreach (Student student in students)
            {
                if (db.Students.Find(student.Id) == null)
                {
                    student.Registered = DateTime.Now;
                    db.Students.Add(student);
                }
                else
                {
                    var message = new ErrorMessage()
                    {
                        Field = "Id",
                        Message = $"Id {student.Id.ToString()} already exists in database"
                    };

                    return StatusCode(422, message);
                }
            }
            db.SaveChanges();

            return StatusCode(201, students);
        }

        /// <summary>
        /// Delete student by ID
        /// </summary>
        /// <remarks>Delete student by given ID.</remarks>
        /// <param name="studentId">ID of the student to delete</param>
        /// <response code="204">Deleted successfully</response>
        /// <response code="401">unauthorized</response>
        /// <response code="404">Student not found</response>
        [HttpDelete]
        [Route("/student/{studentId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StudentStudentIdDelete")]
        public virtual IActionResult StudentStudentIdDelete([FromRoute (Name = "studentId")][Required]int studentId)
        {
            using var db = new DB.StudentDataContext();
            var student = db.Students.Include(s => s.Location)
                .Include(s => s.Picture).FirstOrDefault(s => s.Id == studentId);

            if (student != null)
            {
                db.Students.Remove(student);
                db.SaveChanges();
                
                return StatusCode(204);
            }
            return StatusCode(404);
        }

        /// <summary>
        /// Update some fields of student
        /// </summary>
        /// <remarks>Update some fields of student by given student ID.</remarks>
        /// <param name="studentId">ID of the student to update</param>
        /// <param name="jsonObject">Update existing student</param>
        /// <response code="200">Updated successfully</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">unauthorized</response>
        /// <response code="404">Student not found</response>
        /// <response code="422">Validation exception</response>
        [HttpPatch]
        [Route("/student/{studentId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StudentStudentIdPatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(Student), description: "Updated successfully")]
        [SwaggerResponse(statusCode: 422, type: typeof(List<ErrorMessage>), description: "Validation exception")]
        public virtual IActionResult StudentStudentIdPatch([FromRoute (Name = "studentId")][Required]int studentId, [FromBody]JObject jsonObject)
        {
            using var db = new DB.StudentDataContext();
            var dbStudent = db.Students.Include(s => s.Location)
                .Include(s => s.Picture).FirstOrDefault(s => s.Id == studentId);
            JObject jsonStudent = JObject.Parse(JsonConvert.SerializeObject(dbStudent));
            if (dbStudent != null)
            {
                foreach (var jsonField in jsonObject)
                {
                    try
                    {
                        if (jsonField.Key.Equals("location", StringComparison.OrdinalIgnoreCase)
                            || jsonField.Key.Equals("picture", StringComparison.OrdinalIgnoreCase))
                        {
                            foreach (var jsonSubfield in jsonField.Value as JObject ?? [])
                            {
                                jsonStudent[jsonField.Key][jsonSubfield.Key] = jsonSubfield.Value;
                            }
                        }
                        else
                            jsonStudent[jsonField.Key] = jsonField.Value;
                    }
                    catch
                    {
                        var message = new ErrorMessage()
                        {
                            Field = jsonField.Key,
                            Message = "Given field doesn't match any student class fields."
                        };

                        return StatusCode(422, message);
                    }
                }
            }
            else
            {
                return StatusCode(404);
            }

            Student? stud = jsonStudent.ToObject<Student>();
            if (stud == null)
            {
                return StatusCode(400);
            }
            
            dbStudent.CopyFieldsFromGivenObject(stud);
            db.SaveChanges();

            return StatusCode(200, dbStudent);
        }

        /// <summary>
        /// Update student
        /// </summary>
        /// <remarks>Update student by given ID.</remarks>
        /// <param name="studentId">ID of the student to update</param>
        /// <param name="student">Update existing student</param>
        /// <response code="200">Updated successfully</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">unauthorized</response>
        /// <response code="404">Student not found</response>
        /// <response code="422">Validation exception</response>
        [HttpPut]
        [Route("/student/{studentId}")]
        [Authorize(AuthenticationSchemes = BearerAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StudentStudentIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Student), description: "Updated successfully")]
        [SwaggerResponse(statusCode: 422, type: typeof(List<ErrorMessage>), description: "Validation exception")]
        public virtual IActionResult StudentStudentIdPut([FromRoute (Name = "studentId")][Required]int studentId, [FromBody]Student student)
        { 
            using var db = new DB.StudentDataContext();
            var dbStudent = db.Students.Include(s => s.Location)
                .Include(s => s.Picture).FirstOrDefault(s => s.Id == studentId);
            if (dbStudent != null)
            {
                dbStudent.CopyFieldsFromGivenObject(student);
            }
            else
            {
                return StatusCode(404);
            }

            db.SaveChanges();

            return StatusCode(200, dbStudent);
        }
    }
}
